{"title":{"text":"<h2 id=\"t_58ae76e80100llv8\" class=\"titName SG_txta\">学习awk</h2>"},"content":{"text":"<div id=\"sina_keyword_ad_area2\" class=\"articalContent  \">\n  http://man.lupaworld.com/content/manage/ringkee/awk.htm\n <br /> \n <div lang=\"en\" xml:lang=\"en\"> \n  <div> \n   <div> \n    <div> \n     <h1><a name=\"id2875166\"></a>Awk学习笔记</h1> \n    </div> \n    <div> \n     <div> \n      <h3><span>整理：Jims of <a href=\"http://www.ringkee.com/\" target=\"_top\">肥肥世家</a></span></h3> \n      <div> \n       <div> \n        <p><tt>&lt;<a href=\"mailto:jims.yang@gmail.com\">jims.yang@gmail.com</a>&gt;</tt></p> \n       </div> \n      </div> \n     </div> \n    </div> \n    <div> \n     <p>Copyright &copy; 2004 本文遵从GPL协议，欢迎转载、修改、散布。</p> \n    </div> \n    <div> \n     <p>第一次发布时间:2004年8月6日</p> \n    </div> \n   </div> \n   <hr />\n  </div> \n  <div> \n   <p><b>Table of Contents</b></p> \n   <dl> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2874788\"> 1. awk简介</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2875182\"> 2. awk命令格式和选项</a></span>\n    </dt> \n    <dd> \n     <dl> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2875104\"> 2.1. awk的语法有两种形式</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2811790\"> 2.2. 命令选项</a></span>\n      </dt> \n     </dl> \n    </dd> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2810094\"> 3. 模式和操作</a></span>\n    </dt> \n    <dd> \n     <dl> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2810128\"> 3.1. 模式</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2810236\"> 3.2. 操作</a></span>\n      </dt> \n     </dl> \n    </dd> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2810288\"> 4. awk的环境变量</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861410\"> 5. awk运算符</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861636\"> 6. 记录和域</a></span>\n    </dt> \n    <dd> \n     <dl> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861644\"> 6.1. 记录</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861680\"> 6.2. 域</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861697\"> 6.3. 域分隔符</a></span>\n      </dt> \n     </dl> \n    </dd> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861728\"> 7. gawk专用正则表达式元字符</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861902\"> 8. POSIX字符集</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861922\"> 9. 匹配操作符(~)</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861937\"> 10. 比较表达式</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861975\"> 11. 范围模板</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2861992\"> 12. 一个验证passwd文件有效性的例子</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808705\"> 13. 几个实例</a></span>\n    </dt> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808824\"> 14. awk编程</a></span>\n    </dt> \n    <dd> \n     <dl> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808832\"> 14.1. 变量</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808925\"> 14.2. BEGIN模块</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808950\"> 14.3. END模块</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2808971\"> 14.4. 重定向和管道</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2809145\"> 14.5. 条件语句</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2809263\"> 14.6. 循环</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2809375\"> 14.7. 数组</a></span>\n      </dt> \n      <dt>\n       <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2809497\"> 14.8. awk的内建函数</a></span>\n      </dt> \n     </dl> \n    </dd> \n    <dt>\n     <span><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2876387\"> 15. How-to</a></span>\n    </dt> \n   </dl> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2874788\"></a>1.&nbsp;<wbr />awk简介</h2> \n     </div> \n    </div> \n   </div> \n   <p>awk 是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。它支持用户自定义函数和 动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk的处理文本和数据的方式是这 样的，它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出 (屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理。awk分别代表其作者姓氏的第一个字母。因为它的作者是三个人，分别是Alfred Aho、Brian Kernighan、Peter Weinberger。gawk是awk的GNU版本，它提供了Bell实验室和GNU的一些扩展。下面介绍的awk是以GUN的gawk为例的，在 linux系统中已把awk链接到gawk，所以下面全部以awk进行介绍。</p> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2875182\"></a>2.&nbsp;<wbr />awk命令格式和选项</h2> \n     </div> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2875104\"></a>2.1.&nbsp;<wbr />awk的语法有两种形式</h3> \n      </div> \n     </div> \n    </div> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>awk [options] 'script' var=value file(s)</p> </li> \n      <li> <p>awk [options] -f scriptfile var=value file(s)</p> </li> \n     </ul> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2811790\"></a>2.2.&nbsp;<wbr />命令选项</h3> \n      </div> \n     </div> \n    </div> \n    <div> \n     <dl> \n      <dt>\n       <span>-F fs or --field-separator fs</span>\n      </dt> \n      <dd> \n       <p>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</p> \n      </dd> \n      <dt>\n       <span>-v var=value or --asign var=value</span>\n      </dt> \n      <dd> \n       <p>赋值一个用户定义变量。</p> \n      </dd> \n      <dt>\n       <span>-f scripfile or --file scriptfile</span>\n      </dt> \n      <dd> \n       <p>从脚本文件中读取awk命令。</p> \n      </dd> \n      <dt>\n       <span>-mf nnn and -mr nnn</span>\n      </dt> \n      <dd> \n       <p> 对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p> \n      </dd> \n      <dt>\n       <span>-W compact or --compat,</span> \n       <span>-W traditional or --traditional</span>\n      </dt> \n      <dd> \n       <p>在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</p> \n      </dd> \n      <dt>\n       <span>-W copyleft or --copyleft,</span> \n       <span>-W copyright or --copyright</span>\n      </dt> \n      <dd> \n       <p>打印简短的版权信息。</p> \n      </dd> \n      <dt>\n       <span>-W help or --help,</span> \n       <span>-W usage or --usage</span>\n      </dt> \n      <dd> \n       <p>打印全部awk选项和每个选项的简短说明。</p> \n      </dd> \n      <dt>\n       <span>-W lint or --lint</span>\n      </dt> \n      <dd> \n       <p>打印不能向传统unix平台移植的结构的警告。</p> \n      </dd> \n      <dt>\n       <span>-W lint-old or --lint-old</span>\n      </dt> \n      <dd> \n       <p>打印关于不能向传统unix平台移植的结构的警告。</p> \n      </dd> \n      <dt>\n       <span>-W posix</span>\n      </dt> \n      <dd> \n       <p> 打开兼容模式。但有以下限制，不识别：\\x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。</p> \n      </dd> \n      <dt>\n       <span>-W re-interval or --re-inerval</span>\n      </dt> \n      <dd> \n       <p>允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。</p> \n      </dd> \n      <dt>\n       <span>-W source program-text or --source program-text</span>\n      </dt> \n      <dd> \n       <p>使用program-text作为源代码，可与-f命令混用。</p> \n      </dd> \n      <dt>\n       <span>-W version or --version</span>\n      </dt> \n      <dd> \n       <p>打印bug报告信息的版本。</p> \n      </dd> \n     </dl> \n    </div> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2810094\"></a>3.&nbsp;<wbr />模式和操作</h2> \n     </div> \n    </div> \n   </div> \n   <div> \n    <dl> \n     <dt>\n      <span>awk脚本是由模式和操作组成的：</span>\n     </dt> \n     <dd> \n      <p>pattern {action} 如$ awk '/root/' test，或$ awk '$3 &lt; 100' test。</p> \n     </dd> \n    </dl> \n   </div> \n   <p> 两者是可选的，如果没有模式，则action应用到全部记录，如果没有action，则输出匹配全部记录。默认情况下，每一个输入行都是一条记录，但用户可通过RS变量指定不同的分隔符进行分隔。</p> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2810128\"></a>3.1.&nbsp;<wbr />模式</h3> \n      </div> \n     </div> \n    </div> \n    <p>模式可以是以下任意一个：</p> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>/正则表达式/：使用通配符的扩展集。</p> </li> \n      <li> <p> 关系表达式：可以用下面运算符表中的关系运算符进行操作，可以是字符串或数字的比较，如$2&gt;%1选择第二个字段比第一个字段长的行。</p> </li> \n      <li> <p>模式匹配表达式：用运算符~(匹配)和~!(不匹配)。</p> </li> \n      <li> <p>模式，模式：指定一个行的范围。该语法不能包括BEGIN和END模式。</p> </li> \n      <li> <p>BEGIN：让用户指定在第一条输入记录被处理之前所发生的动作，通常可在这里设置全局变量。</p> </li> \n      <li> <p>END：让用户在最后一条输入记录被读取之后发生的动作。</p> </li> \n     </ul> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2810236\"></a>3.2.&nbsp;<wbr />操作</h3> \n      </div> \n     </div> \n    </div> \n    <p>操作由一人或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内。主要有四部份：</p> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>变量或数组赋值</p> </li> \n      <li> <p>输出命令</p> </li> \n      <li> <p>内置函数</p> </li> \n      <li> <p>控制流命令</p> </li> \n     </ul> \n    </div> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2810288\"></a>4.&nbsp;<wbr />awk的环境变量</h2> \n     </div> \n    </div> \n   </div> \n   <div>\n    <a name=\"id2810296\"></a> \n    <p> <b>Table&nbsp;<wbr />1.&nbsp;<wbr />awk的环境变量</b></p> \n    <table summary=\"awk的环境变量\" border=\"1\"> \n     <colgroup> \n      <col /> \n      <col />\n     </colgroup> \n     <thead> \n      <tr> \n       <th>变量</th> \n       <th>描述</th> \n      </tr> \n     </thead> \n     <tbody> \n      <tr> \n       <td>$n</td> \n       <td>当前记录的第n个字段，字段间由FS分隔。</td> \n      </tr> \n      <tr> \n       <td>$0</td> \n       <td>完整的输入记录。</td> \n      </tr> \n      <tr> \n       <td>ARGC</td> \n       <td>命令行参数的数目。</td> \n      </tr> \n      <tr> \n       <td>ARGIND</td> \n       <td>命令行中当前文件的位置(从0开始算)。</td> \n      </tr> \n      <tr> \n       <td>ARGV</td> \n       <td>包含命令行参数的数组。</td> \n      </tr> \n      <tr> \n       <td>CONVFMT</td> \n       <td>数字转换格式(默认值为%.6g)</td> \n      </tr> \n      <tr> \n       <td>ENVIRON</td> \n       <td>环境变量关联数组。</td> \n      </tr> \n      <tr> \n       <td>ERRNO</td> \n       <td>最后一个系统错误的描述。</td> \n      </tr> \n      <tr> \n       <td>FIELDWIDTHS</td> \n       <td>字段宽度列表(用空格键分隔)。</td> \n      </tr> \n      <tr> \n       <td>FILENAME</td> \n       <td>当前文件名。</td> \n      </tr> \n      <tr> \n       <td>FNR</td> \n       <td>同NR，但相对于当前文件。</td> \n      </tr> \n      <tr> \n       <td>FS</td> \n       <td>字段分隔符(默认是任何空格)。</td> \n      </tr> \n      <tr> \n       <td>IGNORECASE</td> \n       <td>如果为真，则进行忽略大小写的匹配。</td> \n      </tr> \n      <tr> \n       <td>NF</td> \n       <td>当前记录中的字段数。</td> \n      </tr> \n      <tr> \n       <td>NR</td> \n       <td>当前记录数。</td> \n      </tr> \n      <tr> \n       <td>OFMT</td> \n       <td>数字的输出格式(默认值是%.6g)。</td> \n      </tr> \n      <tr> \n       <td>OFS</td> \n       <td>输出字段分隔符(默认值是一个空格)。</td> \n      </tr> \n      <tr> \n       <td>ORS</td> \n       <td>输出记录分隔符(默认值是一个换行符)。</td> \n      </tr> \n      <tr> \n       <td>RLENGTH</td> \n       <td>由match函数所匹配的字符串的长度。</td> \n      </tr> \n      <tr> \n       <td>RS</td> \n       <td>记录分隔符(默认是一个换行符)。</td> \n      </tr> \n      <tr> \n       <td>RSTART</td> \n       <td>由match函数所匹配的字符串的第一个位置。</td> \n      </tr> \n      <tr> \n       <td>SUBSEP</td> \n       <td>数组下标分隔符(默认值是\\034)。</td> \n      </tr> \n     </tbody> \n    </table> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861410\"></a>5.&nbsp;<wbr />awk运算符</h2> \n     </div> \n    </div> \n   </div> \n   <div>\n    <a name=\"id2861418\"></a> \n    <p> <b>Table&nbsp;<wbr />2.&nbsp;<wbr />运算符</b></p> \n    <table summary=\"运算符\" border=\"1\"> \n     <colgroup> \n      <col /> \n      <col />\n     </colgroup> \n     <thead> \n      <tr> \n       <th>运算符</th> \n       <th>描述</th> \n      </tr> \n     </thead> \n     <tbody> \n      <tr> \n       <td>= += -= *= /= %= ^= **=</td> \n       <td>赋值</td> \n      </tr> \n      <tr> \n       <td>?:</td> \n       <td>C条件表达式</td> \n      </tr> \n      <tr> \n       <td>||</td> \n       <td>逻辑或</td> \n      </tr> \n      <tr> \n       <td>&amp;&amp;</td> \n       <td>逻辑与</td> \n      </tr> \n      <tr> \n       <td>~ ~!</td> \n       <td>匹配正则表达式和不匹配正则表达式</td> \n      </tr> \n      <tr> \n       <td>&lt; &lt;= &gt; &gt;= != ==</td> \n       <td>关系运算符</td> \n      </tr> \n      <tr> \n       <td>空格</td> \n       <td>连接</td> \n      </tr> \n      <tr> \n       <td>+ -</td> \n       <td>加，减</td> \n      </tr> \n      <tr> \n       <td>* / &amp;</td> \n       <td>乘，除与求余</td> \n      </tr> \n      <tr> \n       <td>+ - !</td> \n       <td>一元加，减和逻辑非</td> \n      </tr> \n      <tr> \n       <td>^ ***</td> \n       <td>求幂</td> \n      </tr> \n      <tr> \n       <td>++ --</td> \n       <td>增加或减少，作为前缀或后缀</td> \n      </tr> \n      <tr> \n       <td>$</td> \n       <td>字段引用</td> \n      </tr> \n      <tr> \n       <td>in</td> \n       <td>数组成员</td> \n      </tr> \n     </tbody> \n    </table> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861636\"></a>6.&nbsp;<wbr />记录和域</h2> \n     </div> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2861644\"></a>6.1.&nbsp;<wbr />记录</h3> \n      </div> \n     </div> \n    </div> \n    <p>awk把每一个以换行符结束的行称为一个记录。</p> \n    <p>记录分隔符：默认的输入和输出的分隔符都是回车，保存在内建变量ORS和RS中。</p> \n    <p>$0变量：它指的是整条记录。如$ awk '{print $0}' test将输出test文件中的所有记录。</p> \n    <p>变量NR：一个计数器，每处理完一条记录，NR的值就增加1。如$ awk '{print NR,$0}' test将输出test文件中所有记录，并在记录前显示记录号。</p> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2861680\"></a>6.2.&nbsp;<wbr />域</h3> \n      </div> \n     </div> \n    </div> \n    <p>记录中每个单词称做“域”，默认情况下以空格或tab分隔。awk可跟踪域的个数，并在内建变量NF中保存该值。如$ awk '{print $1,$3}' test将打印test文件中第一和第三个以空格分开的列(域)。</p> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2861697\"></a>6.3.&nbsp;<wbr />域分隔符</h3> \n      </div> \n     </div> \n    </div> \n    <p>内建变量FS保存输入域分隔符的值，默认是空格或tab。我们可以通过-F命令行选项修改FS的值。如$ awk -F: '{print $1,$5}' test将打印以冒号为分隔符的第一，第五列的内容。</p> \n    <p>可以同时使用多个域分隔符，这时应该把分隔符写成放到方括号中，如$awk -F'[:\\t]' '{print $1,$3}' test，表示以空格、冒号和tab作为分隔符。</p> \n    <p>输出域的分隔符默认是一个空格，保存在OFS中。如$ awk -F: '{print $1,$5}' test，$1和$5间的逗号就是OFS的值。</p> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861728\"></a>7.&nbsp;<wbr />gawk专用正则表达式元字符</h2> \n     </div> \n    </div> \n   </div> \n   <p>一般通用的元字符集就不讲了，可参考我的<a href=\"http://www.ringkee.com/jims/technic_folder/sed.htm\" target=\"_top\">Sed</a>和<a href=\"http://www.ringkee.com/jims/technic_floder/grep.htm\" target=\"_top\">Grep</a>学习笔记。以下几个是gawk专用的，不适合unix版本的awk。</p> \n   <div> \n    <dl> \n     <dt>\n      <span>\\Y</span>\n     </dt> \n     <dd> \n      <p>匹配一个单词开头或者末尾的空字符串。</p> \n     </dd> \n     <dt>\n      <span>\\B</span>\n     </dt> \n     <dd> \n      <p>匹配单词内的空字符串。</p> \n     </dd> \n     <dt>\n      <span>\\&lt;</span>\n     </dt> \n     <dd> \n      <p>匹配一个单词的开头的空字符串，锚定开始。</p> \n     </dd> \n     <dt>\n      <span>\\&gt;</span>\n     </dt> \n     <dd> \n      <p>匹配一个单词的末尾的空字符串，锚定末尾。</p> \n     </dd> \n     <dt>\n      <span>\\w</span>\n     </dt> \n     <dd> \n      <p>匹配一个字母数字组成的单词。</p> \n     </dd> \n     <dt>\n      <span>\\W</span>\n     </dt> \n     <dd> \n      <p>匹配一个非字母数字组成的单词。</p> \n     </dd> \n     <dt>\n      <span>\\‘</span>\n     </dt> \n     <dd> \n      <p>匹配字符串开头的一个空字符串。</p> \n     </dd> \n     <dt>\n      <span>\\'</span>\n     </dt> \n     <dd> \n      <p>匹配字符串末尾的一个空字符串。</p> \n     </dd> \n    </dl> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861902\"></a>8.&nbsp;<wbr />POSIX字符集</h2> \n     </div> \n    </div> \n   </div> \n   <p>可参考我的<a href=\"http://www.ringkee.com/jims/technic_folder/grep.htm\" target=\"_top\">Grep学习笔记</a></p> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861922\"></a>9.&nbsp;<wbr />匹配操作符(~)</h2> \n     </div> \n    </div> \n   </div> \n   <p>用来在记录或者域内匹配正则表达式。如$ awk '$1 ~/^root/' test将显示test文件第一列中以root开头的行。</p> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861937\"></a>10.&nbsp;<wbr />比较表达式</h2> \n     </div> \n    </div> \n   </div> \n   <p>conditional expression1 ? expression2: expression3，例如：$ awk '{max = {$1 &gt; $3} ? $1: $3: print max}' test。如果第一个域大于第三个域，$1就赋值给max，否则$3就赋值给max。</p> \n   <p>$ awk '$1 + $2 &lt; 100' test。如果第一和第二个域相加大于100，则打印这些行。</p> \n   <p>$ awk '$1 &gt; 5 &amp;&amp; $2 &lt; 10' test,如果第一个域大于5，并且第二个域小于10，则打印这些行。</p> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861975\"></a>11.&nbsp;<wbr />范围模板</h2> \n     </div> \n    </div> \n   </div> \n   <p>范围模板匹配从第一个模板的第一次出现到第二个模板的第一次出现之间所有行。如果有一个模板没出现，则匹配到开头或末尾。如$ awk '/root/,/mysql/' test将显示root第一次出现到mysql第一次出现之间的所有行。</p> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2861992\"></a>12.&nbsp;<wbr />一个验证passwd文件有效性的例子</h2> \n     </div> \n    </div> \n   </div> \n   <p>&nbsp;<wbr /></p> \n   <pre>\n<a name=\"co.1\"></a><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/1.png\" alt=\"1\" border=\"0\" title=\"学习awk\" />$ cat /etc/passwd | awk -F: '\\\n<a name=\"co.2\"></a><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/2.png\" alt=\"2\" border=\"0\" title=\"学习awk\" />NF != 7{\\\n<a name=\"co.3\"></a><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/3.png\" alt=\"3\" border=\"0\" title=\"学习awk\" />printf(&quot;line %d,does not have 7 fields:%s\\n&quot;,NR,$0)}\\\n<a name=\"co.4\"></a><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/4.png\" alt=\"4\" border=\"0\" title=\"学习awk\" />$1 !~ /[A-Za-z0-9]/{printf(&quot;line %d,non alpha and numeric user id:%d: %s\\n,NR,$0)}\\\n<a name=\"co.5\"></a><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/5.png\" alt=\"5\" border=\"0\" title=\"学习awk\" />$2 == &quot;*&quot; {printf(&quot;line %d, no password: %s\\n&quot;,NR,$0)}'\n</pre> \n   <p>&nbsp;<wbr /></p> \n   <div> \n    <table summary=\"Callout list\" border=\"0\"> \n     <tbody> \n      <tr> \n       <td valign=\"top\" width=\"5%\" align=\"left\"><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#co.1\"><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/1.png\" alt=\"1\" border=\"0\" title=\"学习awk\" /></a></td> \n       <td valign=\"top\" align=\"left\"> <p>cat把结果输出给awk，awk把域之间的分隔符设为冒号。</p> </td> \n      </tr> \n      <tr> \n       <td valign=\"top\" width=\"5%\" align=\"left\"><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#co.2\"><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/2.png\" alt=\"2\" border=\"0\" title=\"学习awk\" /></a></td> \n       <td valign=\"top\" align=\"left\"> <p>如果域的数量(NF)不等于7，就执行下面的程序。</p> </td> \n      </tr> \n      <tr> \n       <td valign=\"top\" width=\"5%\" align=\"left\"><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#co.3\"><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/3.png\" alt=\"3\" border=\"0\" title=\"学习awk\" /></a></td> \n       <td valign=\"top\" align=\"left\"> <p>printf打印字符串&quot;line ?? does not have 7 fields&quot;，并显示该条记录。</p> </td> \n      </tr> \n      <tr> \n       <td valign=\"top\" width=\"5%\" align=\"left\"><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#co.4\"><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/4.png\" alt=\"4\" border=\"0\" title=\"学习awk\" /></a></td> \n       <td valign=\"top\" align=\"left\"> <p>如果第一个域没有包含任何字母和数字，printf打印“no alpha and numeric user id&quot; ，并显示记录数和记录。</p> </td> \n      </tr> \n      <tr> \n       <td valign=\"top\" width=\"5%\" align=\"left\"><a href=\"http://man.lupaworld.com/content/manage/ringkee/awk.htm#co.5\"><img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"http://man.lupaworld.com/content/manage/ringkee/images/callouts/5.png\" alt=\"5\" border=\"0\" title=\"学习awk\" /></a></td> \n       <td valign=\"top\" align=\"left\"> <p>如果第二个域是一个星号，就打印字符串“no passwd”，紧跟着显示记录数和记录本身。</p> </td> \n      </tr> \n     </tbody> \n    </table> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2808705\"></a>13.&nbsp;<wbr />几个实例</h2> \n     </div> \n    </div> \n   </div> \n   <div> \n    <ul type=\"disc\"> \n     <li> <p>$ awk '/^(no|so)/' test-----打印所有以模式no或so开头的行。</p> </li> \n     <li> <p>$ awk '/^[ns]/{print $1}' test-----如果记录以n或s开头，就打印这个记录。</p> </li> \n     <li> <p>$ awk '$1 ~/[0-9][0-9]$/(print $1}' test-----如果第一个域以两个数字结束就打印这个记录。</p> </li> \n     <li> <p>$ awk '$1 == 100 || $2 &lt; 50' test-----如果第一个或等于100或者第二个域小于50，则打印该行。</p> </li> \n     <li> <p>$ awk '$1 != 10' test-----如果第一个域不等于10就打印该行。</p> </li> \n     <li> <p>$ awk '/test/{print $1 + 10}' test-----如果记录包含正则表达式test，则第一个域加10并打印出来。</p> </li> \n     <li> <p>$ awk '{print ($1 &gt; 5 ? &quot;ok &quot;$1: &quot;error&quot;$1)}' test-----如果第一个域大于5则打印问号后面的表达式值，否则打印冒号后面的表达式值。</p> </li> \n     <li> <p>$ awk '/^root/,/^mysql/' test----打印以正则表达式root开头的记录到以正则表达式mysql开头的记录范围内的所有记录。如果找到一个新的正则表达式root开头的记 录，则继续打印直到下一个以正则表达式mysql开头的记录为止，或到文件末尾。</p> </li> \n    </ul> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2808824\"></a>14.&nbsp;<wbr />awk编程</h2> \n     </div> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2808832\"></a>14.1.&nbsp;<wbr />变量</h3> \n      </div> \n     </div> \n    </div> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>在awk中，变量不需要定义就可以直接使用，变量类型可以是数字或字符串。</p> </li> \n      <li> <p>赋 值格式：Variable = expression，如$ awk '$1 ~/test/{count = $2 + $3; print count}' test,上式的作用是,awk先扫描第一个域，一旦test匹配，就把第二个域的值加上第三个域的值，并把结果赋值给变量count，最后打印出来。</p> </li> \n      <li> <p>awk 可以在命令行中给变量赋值，然后将这个变量传输给awk脚本。如$ awk -F: -f awkscript month=4 year=2004 test，上式的month和year都是自定义变量，分别被赋值为4和2004。在awk脚本中，这些变量使用起来就象是在脚本中建立的一样。注意，如 果参数前面出现test，那么在BEGIN语句中的变量就不能被使用。</p> </li> \n      <li> <p>域变量也可被赋值和修改，如$ awk '{$2 = 100 + $1; print }' test,上式表示，如果第二个域不存在，awk将计算表达式100加$1的值，并将其赋值给$2，如果第二个域存在，则用表达式的值覆盖$2原来的值。 再例如：$ awk '$1 == &quot;root&quot;{$1 =&quot;test&quot;;print}' test，如果第一个域的值是“root”，则把它赋值为“test”，注意，字符串一定要用双引号。</p> </li> \n      <li> <p>内建变量的使用。 变量列表在前面已列出，现在举个例子说明一下。$ awk -F: '{IGNORECASE=1; $1 == &quot;MARY&quot;{print NR,$1,$2,$NF}'test，把IGNORECASE设为1代表忽略大小写，打印第一个域是mary的记录数、第一个域、第二个域和最后一个 域。</p> </li> \n     </ul> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2808925\"></a>14.2.&nbsp;<wbr />BEGIN模块</h3> \n      </div> \n     </div> \n    </div> \n    <p>BEGIN 模块后紧跟着动作块，这个动作块在awk处理任何输入文件之前执行。所以它可以在没有任何输入的情况下进行测试。它通常用来改变内建变量的值，如 OFS,RS和FS等，以及打印标题。如：$ awk 'BEGIN{FS=&quot;:&quot;; OFS=&quot;\\t&quot;; ORS=&quot;\\n\\n&quot;}{print $1,$2,$3} test。上式表示，在处理输入文件以前，域分隔符(FS)被设为冒号，输出文件分隔符(OFS)被设置为制表符，输出记录分隔符(ORS)被设置为两个 换行符。$ awk 'BEGIN{print &quot;TITLE TEST&quot;}只打印标题。</p> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2808950\"></a>14.3.&nbsp;<wbr />END模块</h3> \n      </div> \n     </div> \n    </div> \n    <p>END不匹配任何的输入文件，但是执行动作块中的所有动作，它在整个输入文件处理完成后被执行。如$ awk 'END{print &quot;The number of records is&quot; NR}' test，上式将打印所有被处理的记录数。</p> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2808971\"></a>14.4.&nbsp;<wbr />重定向和管道</h3> \n      </div> \n     </div> \n    </div> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>awk 可使用shell的重定向符进行重定向输出，如：$ awk '$1 = 100 {print $1 &gt; &quot;output_file&quot; }' test。上式表示如果第一个域的值等于100，则把它输出到output_file中。也可以用&gt;&gt;来重定向输出，但不清空文件，只做追加 操作。</p> </li> \n      <li> <p>输出重定向需用到getline函数。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件 获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返 回0，如果出现错误，例如打开文件失败，就返回-1。如：</p> <p>$ awk 'BEGIN{ &quot;date&quot; | getline d; print d}' test。执行linux的date命令，并通过管道输出给getline，然后再把输出赋值给自定义变量d，并打印它。</p> <p>$ awk 'BEGIN{&quot;date&quot; | getline d; split(d,mon); print mon[2]}' test。执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给d，split函数把变量d转 化成数组mon，然后打印数组mon的第二个元素。</p> <p>$ awk 'BEGIN{while( &quot;ls&quot; | getline) print}'，命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为 BEGIN块在打开输入文件前执行，所以可以忽略输入文件。</p> <p>$ awk 'BEGIN{printf &quot;What is your name?&quot;; getline name &lt; &quot;/dev/tty&quot; } $1 ~name {print &quot;Found&quot; name on line &quot;, NR &quot;.&quot;} END{print &quot;See you,&quot; name &quot;.&quot;} test。在屏幕上打印”What is your name?&quot;,并等待用户应答。当一行输入完毕后，getline函数从终端接收该行输入，并把它储存在自定义变量name中。如果第一个域匹配变量 name的值，print函数就被执行，END块打印See you和name的值。</p> <p>$ awk 'BEGIN{while (getline &lt; &quot;/etc/passwd&quot; &gt; 0) lc++; print lc}'。awk将逐行读取文件/etc/passwd的内容，在到达文件末尾前，计数器lc一直增加，当到末尾时，打印lc的值。注意，如果文件不存 在，getline返回-1，如果到达文件的末尾就返回0，如果读到一行，就返回1，所以命令 while (getline &lt; &quot;/etc/passwd&quot;)在文件不存在的情况下将陷入无限循环，因为返回-1表示逻辑真。</p> </li> \n      <li> <p>可以在awk中打开一个管 道，且同一时刻只能有一个管道存在。通过close()可关闭管道。如：$ awk '{print $1, $2 | &quot;sort&quot; }' test END {close(&quot;sort&quot;)}。awd把print语句的输出通过管道作为linux命令sort的输入,END块执行关闭管道操作。</p> </li> \n      <li> <p>system函数可以在awk中执行linux的命令。如：$ awk 'BEGIN{system(&quot;clear&quot;)'。</p> </li> \n      <li> <p> fflush函数用以刷新输出缓冲区，如果没有参数，就刷新标准输出的缓冲区，如果以空字符串为参数，如fflush(&quot;&quot;),则刷新所有文件和管道的输出缓冲区。</p> </li> \n     </ul> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2809145\"></a>14.5.&nbsp;<wbr />条件语句</h3> \n      </div> \n     </div> \n    </div> \n    <p>awk中的条件语句是从C语言中借鉴过来的，可控制程序的流程。</p> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2809159\"></a>14.5.1.&nbsp;<wbr />if语句</h4> \n       </div> \n      </div> \n     </div> \n     <pre>\n格式：\n        {if (expression){\n                   statement; statement; ...\n                     }\n        }\n</pre> \n     <p>$ awk '{if ($1 &lt;$2) print $2 &quot;too high&quot;}' test。如果第一个域小于第二个域则打印。</p> \n     <p>$ awk '{if ($1 &lt; $2) {count++; print &quot;ok&quot;}}' test.如果第一个域小于第二个域，则count加一，并打印ok。</p> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2809192\"></a>14.5.2.&nbsp;<wbr />if/else语句，用于双重判断。</h4> \n       </div> \n      </div> \n     </div> \n     <pre>\n格式：\n        {if (expression){\n                   statement; statement; ...\n                       }\n        else{\n                   statement; statement; ...\n                       }\n        }\n</pre> \n     <p>$ awk '{if ($1 &gt; 100) print $1 &quot;bad&quot; ; else print &quot;ok&quot;}' test。如果$1大于100则打印$1 bad,否则打印ok。</p> \n     <p>$ awk '{if ($1 &gt; 100){ count++; print $1} else {count--; print $2}' test。如果$1大于100，则count加一，并打印$1，否则count减一，并打印$1。</p> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2809231\"></a>14.5.3.&nbsp;<wbr />if/else else if语句，用于多重判断。</h4> \n       </div> \n      </div> \n     </div> \n     <pre>\n格式：\n        {if (expression){\n                    statement; statement; ...\n                   }\n        else if (expression){\n                    statement; statement; ...\n                   }\n        else if (expression){\n                    statement; statement; ...\n                   }\n        else {\n                   statement; statement; ...\n             }\n        }\n</pre>\n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2809263\"></a>14.6.&nbsp;<wbr />循环</h3> \n      </div> \n     </div> \n    </div> \n    <div> \n     <ul type=\"disc\"> \n      <li> <p>awk有三种循环:while循环；for循环；special for循环。</p> </li> \n      <li> <p>$ awk '{ i = 1; while ( i &lt;= NF ) { print NF,$i; i++}}' test。变量的初始值为1，若i小于可等于NF(记录中域的个数),则执行打印语句，且i增加1。直到i的值大于NF.</p> </li> \n      <li> <p>$ awk '{for (i = 1; i&lt;NF; i++) print NF,$i}' test。作用同上。</p> </li> \n      <li> <p> breadkcontinue语句。break用于在满足条件的情况下跳出循环；continue用于在满足条件的情况下忽略后面的语句，直接返回循环的顶端。如：</p> <pre>\n{for ( x=3; x&lt;=NF; x++) \n            if ($x&lt;0){print &quot;Bottomed out!&quot;; break}}\n{for ( x=3; x&lt;=NF; x++)\n            if ($x==0){print &quot;Get next item&quot;; continue}}\n      \n</pre></li> \n      <li> <p>next语句从输入文件中读取一行，然后从头开始执行awk脚本。如：</p> <pre>\n{if ($1 ~/test/){next}\n    else {print}\n}\n     \n</pre></li> \n      <li> <p>exit语句用于结束awk程序，但不会略过END块。退出状态为0代表成功，非零值表示出错。</p> </li> \n     </ul> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2809375\"></a>14.7.&nbsp;<wbr />数组</h3> \n      </div> \n     </div> \n    </div> \n    <p>awk中的数组的下标可以是数字和字母，称为关联数组。</p> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2809389\"></a>14.7.1.&nbsp;<wbr />下标与关联数组</h4> \n       </div> \n      </div> \n     </div> \n     <div> \n      <ul type=\"disc\"> \n       <li> <p>用 变量作为数组下标。如：$ awk {name[x++]=$2};END{for(i=0;i&lt;NR;i++) print i,name[i]}' test。数组name中的下标是一个自定义变量x，awk初始化x的值为0，在每次使用后增加1。第二个域的值被赋给name数组的各个元素。在END 模块中，for循环被用于循环整个数组，从下标为0的元素开始，打印那些存储在数组中的值。因为下标是关健字，所以它不一定从0开始，可以从任何值开始。</p> </li> \n       <li> <p>special for循环用于读取关联数组中的元素。格式如下：</p> <pre>\n{for (item in arrayname){\n         print arrayname[item]\n         }\n}\n</pre> $ awk '/^tom/{name[NR]=$1}; END{for(i in name){print name[i]}}' test。打印有值的数组元素。打印的顺序是随机的。</li> \n       <li> <p>用字符串作为下标。如：count[&quot;test&quot;]</p> </li> \n       <li> <p>用域值作为数组的下标。一种新的 for循环方式，for (index_value in array) statement。如:$ awk '{count[$1]++} END{for(name in count) print name,count[name]}' test。该语句将打印$1中字符串出现的次数。它首先以第一个域作数组count的下标，第一个域变化，索引就变化。</p> </li> \n       <li> <p>delete 函数用于删除数组元素。如：$ awk '{line[x++]=$1} END{for(x in line) delete(line[x])}' test。分配给数组line的是第一个域的值，所有记录处理完成后，special for循环将删除每一个元素。</p> </li> \n      </ul> \n     </div> \n    </div> \n   </div> \n   <div lang=\"en\" xml:lang=\"en\"> \n    <div> \n     <div> \n      <div> \n       <h3><a name=\"id2809497\"></a>14.8.&nbsp;<wbr />awk的内建函数</h3> \n      </div> \n     </div> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2809505\"></a>14.8.1.&nbsp;<wbr />字符串函数</h4> \n       </div> \n      </div> \n     </div> \n     <div> \n      <ul type=\"disc\"> \n       <li> <p> sub函数匹配记录中最大、最靠左边的子字符串的正则表达式，并用替换字符串替换这些字符串。如果没有指定目标字符串就默认使用整个记录。替换只发生在第一次匹配的时候。格式如下：</p> <pre>\n            sub (regular expression, substitution string):\n            sub (regular expression, substitution string, target string)\n</pre> <p>实例：</p> <pre>\n            $ awk '{ sub(/test/, &quot;mytest&quot;); print }' testfile\n            $ awk '{ sub(/test/, &quot;mytest&quot;); $1}; print }' testfile\n</pre> <p>第一个例子在整个记录中匹配，替换只发生在第一次匹配发生的时候。如要在整个文件中进行匹配需要用到gsub</p> <p>第二个例子在整个记录的第一个域中进行匹配，替换只发生在第一次匹配发生的时候。</p> </li> \n       <li> <p>gsub函数作用如sub，但它在整个文档中进行匹配。格式如下：</p> <pre>\n            gsub (regular expression, substitution string)\n            gsub (regular expression, substitution string, target string)\n</pre> <p>实例：</p> <pre>\n            $ awk '{ gsub(/test/, &quot;mytest&quot;); print }' testfile\n            $ awk '{ gsub(/test/, &quot;mytest&quot;), $1 }; print }' testfile\n</pre> <p>第一个例子在整个文档中匹配test，匹配的都被替换成mytest。</p> <p>第二个例子在整个文档的第一个域中匹配，所有匹配的都被替换成mytest。</p> </li> \n       <li> <p>index函数返回子字符串第一次被匹配的位置，偏移量从位置1开始。格式如下：</p> <pre>\n          index(string, substring)\n</pre> <p>实例：</p> <pre>\n            $ awk '{ print index(&quot;test&quot;, &quot;mytest&quot;) }' testfile\n</pre> <p>实例返回test在mytest的位置，结果应该是3。</p> </li> \n       <li> <p>length函数返回记录的字符数。格式如下：</p> <pre>\n            length( string )\n            length\n</pre> <p>实例：</p> <pre>\n            $ awk '{ print length( &quot;test&quot; ) }' \n            $ awk '{ print length }' testfile\n</pre> <p>第一个实例返回test字符串的长度。</p> <p>第二个实例返回testfile文件中第条记录的字符数。</p> </li> \n       <li> <p>substr函数返回从位置1开始的子字符串，如果指定长度超过实际长度，就返回整个字符串。格式如下：</p> <pre>\n            substr( string, starting position )\n            substr( string, starting position, length of string )\n</pre> <p>实例：</p> <pre>\n            $ awk '{ print substr( &quot;hello world&quot;, 7,11 ) }' \n</pre> <p>上例截取了world子字符串。</p> </li> \n       <li> <p> match函数返回在字符串中正则表达式位置的索引，如果找不到指定的正则表达式则返回0。match函数会设置内建变量RSTART为字符串中子字符串的开始位置，RLENGTH为到子字符串末尾的字符个数。substr可利于这些变量来截取字符串。函数格式如下：</p> <pre>\n            match( string, regular expression )\n</pre> <p>实例：</p> <pre>\n            $ awk '{start=match(&quot;this is a test&quot;,/[a-z]+$/); print start}'\n            $ awk '{start=match(&quot;this is a test&quot;,/[a-z]+$/); print start, RSTART, RLENGTH }'\n</pre> <p>第一个实例打印以连续小写字符结尾的开始位置，这里是11。</p> <p>第二个实例还打印RSTART和RLENGTH变量，这里是11(start)，11(RSTART)，4(RLENGTH)。</p> </li> \n       <li> <p>toupper和tolower函数可用于字符串大小间的转换，该功能只在gawk中有效。格式如下：</p> <pre>\n            toupper( string )\n            tolower( string )\n</pre> <p>实例：</p> <pre>\n            $ awk '{ print toupper(&quot;test&quot;), tolower(&quot;TEST&quot;) }'\n</pre></li> \n       <li> <p>split函数可按给定的分隔符把字符串分割为一个数组。如果分隔符没提供，则按当前FS值进行分割。格式如下：</p> <pre>\n            split( string, array, field separator )\n            split( string, array )\n</pre> <p>实例：</p> <pre>\n            $ awk '{ split( &quot;20:18:00&quot;, time, &quot;:&quot; ); print time[2] }'\n</pre> <p>上例把时间按冒号分割到time数组内，并显示第二个数组元素18。</p> </li> \n      </ul> \n     </div> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2875740\"></a>14.8.2.&nbsp;<wbr />时间函数</h4> \n       </div> \n      </div> \n     </div> \n     <div> \n      <ul type=\"disc\"> \n       <li> <p>systime函数返回从1970年1月1日开始到当前时间(不计闰年)的整秒数。格式如下：</p> <pre>\n            systime()\n</pre> <p>实例：</p> <pre>\n            $ awk '{ now = systime(); print now }'\n</pre></li> \n       <li> <p>strftime函数使用C库中的strftime函数格式化时间。格式如下：</p> <pre>\n            systime( [format specification][,timestamp] )\n</pre> \n        <div>\n         <a name=\"id2875802\"></a> \n         <p> <b>Table&nbsp;<wbr />3.&nbsp;<wbr />日期和时间格式说明符</b></p> \n         <table summary=\"日期和时间格式说明符\" border=\"1\"> \n          <colgroup> \n           <col /> \n           <col />\n          </colgroup> \n          <thead> \n           <tr> \n            <th>格式</th> \n            <th>描述</th> \n           </tr> \n          </thead> \n          <tbody> \n           <tr> \n            <td>%a</td> \n            <td>星期几的缩写(Sun)</td> \n           </tr> \n           <tr> \n            <td>%A</td> \n            <td>星期几的完整写法(Sunday)</td> \n           </tr> \n           <tr> \n            <td>%b</td> \n            <td>月名的缩写(Oct)</td> \n           </tr> \n           <tr> \n            <td>%B</td> \n            <td>月名的完整写法(October)</td> \n           </tr> \n           <tr> \n            <td>%c</td> \n            <td>本地日期和时间</td> \n           </tr> \n           <tr> \n            <td>%d</td> \n            <td>十进制日期</td> \n           </tr> \n           <tr> \n            <td>%D</td> \n            <td>日期 08/20/99</td> \n           </tr> \n           <tr> \n            <td>%e</td> \n            <td>日期，如果只有一位会补上一个空格</td> \n           </tr> \n           <tr> \n            <td>%H</td> \n            <td>用十进制表示24小时格式的小时</td> \n           </tr> \n           <tr> \n            <td>%I</td> \n            <td>用十进制表示12小时格式的小时</td> \n           </tr> \n           <tr> \n            <td>%j</td> \n            <td>从1月1日起一年中的第几天</td> \n           </tr> \n           <tr> \n            <td>%m</td> \n            <td>十进制表示的月份</td> \n           </tr> \n           <tr> \n            <td>%M</td> \n            <td>十进制表示的分钟</td> \n           </tr> \n           <tr> \n            <td>%p</td> \n            <td>12小时表示法(AM/PM)</td> \n           </tr> \n           <tr> \n            <td>%S</td> \n            <td>十进制表示的秒</td> \n           </tr> \n           <tr> \n            <td>%U</td> \n            <td>十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</td> \n           </tr> \n           <tr> \n            <td>%w</td> \n            <td>十进制表示的星期几(星期天是0)</td> \n           </tr> \n           <tr> \n            <td>%W</td> \n            <td>十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</td> \n           </tr> \n           <tr> \n            <td>%x</td> \n            <td>重新设置本地日期(08/20/99)</td> \n           </tr> \n           <tr> \n            <td>%X</td> \n            <td>重新设置本地时间(12：00：00)</td> \n           </tr> \n           <tr> \n            <td>%y</td> \n            <td>两位数字表示的年(99)</td> \n           </tr> \n           <tr> \n            <td>%Y</td> \n            <td>当前月份</td> \n           </tr> \n           <tr> \n            <td>%Z</td> \n            <td>时区(PDT)</td> \n           </tr> \n           <tr> \n            <td>%%</td> \n            <td>百分号(%)</td> \n           </tr> \n          </tbody> \n         </table> \n        </div> <p>实例：</p> <pre>\n            $ awk '{ now=strftime( &quot;%D&quot;, systime() ); print now }'\n            $ awk '{ now=strftime(&quot;%m/%d/%y&quot;); print now }'\n</pre></li> \n      </ul> \n     </div> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2876170\"></a>14.8.3.&nbsp;<wbr />内建数学函数</h4> \n       </div> \n      </div> \n     </div> \n     <div>\n      <a name=\"id2876177\"></a> \n      <p> <b>Table&nbsp;<wbr />4.&nbsp;<wbr /></b></p> \n      <table summary=\"\" border=\"1\"> \n       <colgroup> \n        <col /> \n        <col />\n       </colgroup> \n       <thead> \n        <tr> \n         <th>函数名称</th> \n         <th>返回值</th> \n        </tr> \n       </thead> \n       <tbody> \n        <tr> \n         <td>atan2(x,y)</td> \n         <td>y,x范围内的余切</td> \n        </tr> \n        <tr> \n         <td>cos(x)</td> \n         <td>余弦函数</td> \n        </tr> \n        <tr> \n         <td>exp(x)</td> \n         <td>求幂</td> \n        </tr> \n        <tr> \n         <td>int(x)</td> \n         <td>取整</td> \n        </tr> \n        <tr> \n         <td>log(x)</td> \n         <td>自然对数</td> \n        </tr> \n        <tr> \n         <td>rand()</td> \n         <td>随机数</td> \n        </tr> \n        <tr> \n         <td>sin(x)</td> \n         <td>正弦</td> \n        </tr> \n        <tr> \n         <td>sqrt(x)</td> \n         <td>平方根</td> \n        </tr> \n        <tr> \n         <td>srand(x)</td> \n         <td>x是rand()函数的种子</td> \n        </tr> \n        <tr> \n         <td>int(x)</td> \n         <td>取整，过程没有舍入</td> \n        </tr> \n        <tr> \n         <td>rand()</td> \n         <td>产生一个大于等于0而小于1的随机数</td> \n        </tr> \n       </tbody> \n      </table> \n     </div> \n    </div> \n    <div lang=\"en\" xml:lang=\"en\"> \n     <div> \n      <div> \n       <div> \n        <h4><a name=\"id2876353\"></a>14.8.4.&nbsp;<wbr />自定义函数</h4> \n       </div> \n      </div> \n     </div> \n     <p>在awk中还可自定义函数，格式如下：</p> \n     <pre>\n        function name ( parameter, parameter, parameter, ... ) {\n                        statements\n                        return expression                  # the return statement and expression are optional\n        }\n</pre>\n    </div> \n   </div> \n  </div> \n  <div lang=\"en\" xml:lang=\"en\"> \n   <div> \n    <div> \n     <div> \n      <h2 style=\"clear: both;\"><a name=\"id2876387\"></a>15.&nbsp;<wbr />How-to</h2> \n     </div> \n    </div> \n   </div> \n   <div> \n    <ul type=\"disc\"> \n     <li> <p>如何把一行竖排的数据转换成横排？</p> <p>awk '{printf(&quot;%s,&quot;,$1)}' filename</p> </li> \n    </ul> \n   </div> \n  </div> \n </div> \n <div style=\"position: absolute; display: none; z-index: 9999;\">\n  <img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"chrome://livemargins/skin/monitor-background-horizontal.png\" style=\"position: absolute; left: -77px; top: -5px;\" width=\"77\" height=\"5\" alt=\"学习awk\" title=\"学习awk\" /> \n  <img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"chrome://livemargins/skin/monitor-background-vertical.png\" style=\"position: absolute; left: 0pt; top: -5px;\" alt=\"学习awk\" title=\"学习awk\" /> \n  <img src=\"http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif\" real_src=\"chrome://livemargins/skin/monitor-play-button.png\" style=\"position: absolute; left: 1px; top: 0pt; opacity: 0.5; cursor: pointer;\" name=\"monitor-play-button\" alt=\"学习awk\" title=\"学习awk\" />\n </div> \n <br /> \n</div>"},"date":{"text":"2010-10-08 00:17:20"}}