{"title":{"text":"<h2 id=\"t_58ae76e80100kwci\" class=\"titName SG_txta\">读懂异步请求</h2>"},"content":{"text":"<div id=\"sina_keyword_ad_area2\" class=\"articalContent  \">\n  &nbsp;\n <wbr />&nbsp;\n <wbr /> 最近在看Cal Henderson的《构建可扩展的Web站点》，Henderson是Flickr的架构师，这本书将构建一个大规模网站的方方面面，从硬件配置到代码版本、缺点跟踪、性能优化都写了进去，可以说是本Web系统架构师不可不看的书。\n <br /> &nbsp;\n <wbr />&nbsp;\n <wbr /> 第七章讲到远程服务，它是指在当前Web服务以外的服务。例如数据库访问、文件存取、图片处理。远程服务具有不可靠性，因此负载均衡以及故障处理需要仔细设计。同时远程调用的处理时间是不可知的，如果持续等待远程响应，可能对于用户来说响应过长，并且被误认为是Web服务器网络不通畅，从而反复刷新页面严重增加负担。所以这时需要用到异步请求。回调模型比较容易理解，在服务器保留一个后台进程监视回调信息，一旦远程服务器完成任务后就进行回调，然后返回处理结果。\n <br /> &nbsp;\n <wbr />&nbsp;\n <wbr /> 回调的一个实现方法就是不保留后台进程，而是直接使用Web服务器进行回调响应。但是此时出现了问题：Web服务器响应回调之后没法显示给客户端！那么解决方法就是让当前Web服务一直开着，然后去获取远程服务运行的状态：是否已经结束，而不是等待回调。但是如果频繁请求远程服务器，又会增加负担，所以可以建立一个票据(ticket)服务器，它的任务类似RMI的名服务器，远程服务器将回调作为票据注册到票据服务器，在可以回调时将票据关闭；同时Web服务器定时请求，直到票据显示远程端运行结束！\n <br /> &nbsp;\n <wbr />&nbsp;\n <wbr /> 那么如何实现异步调用？PHP显然不支持异步调用，书上没写，但是我想到了AJAX。原来AJAX可不是只用来在JS中操作数据库的。\n <br /> \n</div>"},"date":{"text":"2010-08-30 15:35:06"}}