{"title":{"text":"<h2 id=\"t_58ae76e80100jtq3\" class=\"titName SG_txta\">设计模式日志-策略模式</h2>"},"content":{"text":"<div id=\"sina_keyword_ad_area2\" class=\"articalContent  \">\n  &nbsp;\n <wbr />&nbsp;\n <wbr /> 策略模式的应用场景是：同一类型的多个类，要实现一个同样的功能，但是功能实现又会有所区别。例如：鸭子有fly这个功能，但是不是所有鸭子都可以fly的，例如橡胶鸭子。或者以最近项目开发的一个例子：用户可以发起一个活动，这个活动可以邀请一个人参加，也可以邀请一个团队参加。这时，邀请就成为了一个需要实现的功能，但是邀请个人跟邀请团队显然又是不一样的。\n <br /> 有几种解决办法：\n <br /> &nbsp;\n <wbr />&nbsp;\n <wbr /> 1、最简单的：为每个类独自进行实现。这样会造成重复代码很多，维护起来很麻烦，并且复用性相当差（基本是要靠Ctrl-C Ctrl-v实现了）。但是，你想过假设有10个类，那么每次修改都要修改10处的痛苦吗？\n <br /> &nbsp;\n <wbr />&nbsp;\n <wbr /> 2、使用集中式方法：使用一个集中式方法sendNotify来集中处理所有“邀请”功能。在这个方法中，需要不同实现的类传递过去不同的参数，然后使用各种if switch语句来确定这些实现。这样集中式的处理比前者要好的多，因为修改只需修改一处，同时有些类可以使用同一种实现方法，压缩了代码。这也是我目前采用的一种方法。当然缺点很明显：a、需要程序员开始就考虑清楚，到底需要哪些参数，同时这些参数随着系统扩展很可能会增加，所以实际上可扩展性不佳，最后这个方法我加了11个参数，复杂度可想而知；b、一个方法会变得异常复杂，同时掺杂很多个人风格，即使加入很多注释也没法做到便于阅读，基本上只能本人来管理了；好处是不用写那么多类来实现策略模式，假设确定只有自己来更新这一模块，那么这样其实可以提高效率，在小规模开发中还是有用的，特别是PHP这种接口和类实现起来都比较复杂的环境中。\n <br /> &nbsp;\n <wbr /> 3、策略模式：将不同的实现封装成接口，然后用不同的类来实现这个借口。好处是：a、将各种参数封装成类的字段，调用时只需要知道这个类的大致作用即可，不用传递那么多参数；b、不同的实现放在不同的类中，不用担心代码过长；c、不同类依然可以使用同一种实现。相比方法2，这种方法易于下手（方法2你必须得先考虑清楚需要什么参数，需要什么条件来区分），并且易于扩展。策略模式还可以结合工厂模式，实现自动生成需要的实现方法。\n <br /> &nbsp;\n <wbr /> 总结一下，策略模式提供了什么思路呢？第一，将功能抽象成接口，这样可以将功能需要的一些参数作为类的字段，在对象初始化时也初始化，不用传那么多参数，同时，如果要扩展，只需增加一个类即可；第二，集中式管理，将具有相同功能的类的这个相同功能统一起来管理，从而达到代码的复用。\n <br /> &nbsp;\n <wbr /> 当然了，有句话是没有差方法，只有不合适的方法，如果你实际上只可能有2个类并且不太会有扩展，那么用方法1又何妨？\n <br /> \n <br /> \n</div>"},"date":{"text":"2010-07-12 10:40:25"}}