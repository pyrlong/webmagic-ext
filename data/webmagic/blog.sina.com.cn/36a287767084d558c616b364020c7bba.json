{"title":{"text":"<h2 id=\"t_58ae76e80100n284\" class=\"titName SG_txta\">zzAndroid进程管理机制及优化&nbsp;for&nbsp;HTC&nbsp;HeRO（其它设备也可参考）</h2>"},"content":{"text":"<div id=\"sina_keyword_ad_area2\" class=\"articalContent  \"> \n <h2>转载自 http://noirbright.com/?p=167<br /></h2> \n <small><a href=\"http://noirbright.com/?cat=14\" title=\"查看 原创 的全部文章\" rel=\"category\">原创</a>, by NOirBRight.</small> \n <div> \n  <h1>前言</h1> \n  <p> 由于我不是开发者，所以写这个题目的时候总有些惶恐，怕写出问题，本文内容是笔者通过论坛的学习和自己实践总结出来的一些经验，可能有不对的地方还望指正。本文的主要资料来源自 XDA的一个帖子：<a href=\"http://forum.xda-developers.com/showthread.php?t=622666\"><strong>How to configure Android’s *internal* taskkiller</strong></a></p> \n  <p><strong><br /></strong></p> \n  <h1>理论</h1> \n  <p> Android采取了一种有别于Linux的进程管理策略，有别于Linux的在进程活动停止后就结束该进程，Android把这些进程都保留在内 存中，直到系统需要更多内存为止。这些保留在内存中的进程通常情况下不会影响整体系统的运行速度，并且当用户再次激活这些进程时，提升了进程的启动速度。</p> \n  <p>那Android什么时候结束进程？结束哪个进程呢？之前普遍的认识是Android是依据一个名为LRU（last recently used 最近使用过的程序）列表，将程序进行排序，并结束最早的进程。XDA的楼主又进一步对这个管理机制进行研究，有了如下发现：<span></span></p> \n  <ol> \n   <li> 系统会对进程的重要性进行评估，并将重要性以“oom_adj”这个数值表示出来，赋予各个进程；（系统会根据“oom_adj”来判断需要结束哪些进程，一般来说，“oom_adj”的值越大，该进程被系统选中终止的可能就越高）</li> \n   <li> 前台程序的“oom_adj”值为0，这意味着它不会被系统终止，一旦它不可访问后，会获得个更高的“oom_adj”，作者推测“oom_adj”的值是根据软件在LRU列表中的位置所决定的；</li> \n   <li> Android不同于Linux，有一套自己独特的进程管理模块，这个模块有更强的可定制性，可根据“oom_adj”值的范围来决定进程管理策略，比如可以设定“当内存小于X时，结束“oom_adj”大于Y的进程”。这给了进程管理脚本的编写以更多的选择。</li> \n   <li>Android将进程分为六大类： \n    <ol> \n     <li> <strong>前台进程（foreground）：</strong>目前正在屏幕上显示的进程和一些系统进程。举例来说，Dialer Storage，Google Search等系统进程就是前台进程；再举例来说，当你运行一个程序，如浏览器，当浏览器界面在前台显示时，浏览器属于前台进程 （foreground），但一旦你按home回到主界面，浏览器就变成了后台程序（background）。我们最不希望终止的进程就是前台进程。</li> \n     <li> <strong>可见进程（visible）：</strong>可见进程是一些不在前台，但用户依然可见的进程，举个例来说：widget、输 入法等，都属于visible。这部分进程虽然不在前台，但与我们的使用也密切相关，我们也不希望它们被终止（你肯定不希望时钟、天气，新闻等 widget被终止，那它们将无法同步，你也不希望输入法被终止，否则你每次输入时都需要重新启动输入法）</li> \n     <li><strong>次要服务（secondary server）：</strong>目前正在运行的一些服务（主要服务，如拨号等，是不可能被进程管理终止的，故这里只谈次要服务），举例来说：谷歌企业套件，Gmail内部存储，联系人内部存储等。这部分服务虽然属于次要服务，但跟一些系统功能依然息息相关，我们时常需要用到它们，所以也不希望他们被终止</li> \n     <li> <strong>后台进程（hidden）：</strong>虽然作者用了hidden这个词，但实际即是后台进程（background）， 就是我们通常意义上理解的启动后被切换到后台的进程，如浏览器，阅读器等。当程序显示在屏幕上时，它所运行的进程即为前台进程（foreground）， 一旦我们按home返回主界面（注意是按home，不是按back），程序就驻留在后台，成为后台进程（background）。后台进程的管理策略有多 种：有较为积极的方式，一旦程序到达后台立即终止，这种方式会提高程序的运行速度，但无法加速程序的再次启动；也有较消极的方式，尽可能多的保留后台程 序，虽然可能会影响到单个程序的运行速度，但在再次启动已启动的程序时，速度会有所提升。这里就需要用户根据自己的使用习惯找到一个平衡点</li> \n     <li><strong>内容供应节点（content provider）：</strong>没有程序实体，仅提供内容给别的程序去用的，比如日历供应节点，邮件供应节点等。在终止进程时，这类程序应该有较高的优先权</li> \n     <li> <strong>空进程（empty）：</strong>没有任何东西在内运行的进程，有些程序，比如BTE，在程序退出后，依然会在进程中驻留一个空进程，这个进程里没有任何数据在运行，作用往往是提高该程序下次的启动速度或者记录程序的一些历史信息。这部分进程无疑是应该最先终止的。</li> \n    </ol> </li> \n  </ol> \n  <p><span style=\"font-size: small;\"><br /></span></p> \n  <h1>实践</h1> \n  <p>说完理论，说些实践的东西，怎样管理这六类进程，如何来设置进程管理模块是这部分说的内容。</p> \n  <p>首先是软件，推荐使用MinFreeManager，市场上就有下载，用于设置这六类进程的管理策略。</p> \n  <p>软件运行后有六个输入框，在输入框中只能输入数字，这些数字代表了这类进程的处理策略，比如Foreground App下的输入框显示6，就表示，当可用内存低于6MB时，终止Foreground App。下面的类似，如Empty App下的输入框显示24，则表示，当内存低于24MB时，终止Empty App。</p> \n  <p>从软件数值的设置不难看出结束进程的有限顺序：Empty&gt;Content Provider&gt;Hidden&gt;Secondary Server&gt;Visible&gt;Foreground。</p> \n  <p>但默认设置确存在一些问题：</p> \n  <ol> \n   <li> 各类进程的管理策略的阀值相当接近：6，8，16，20，22，24，最大的相差也不到8MB，在实际程序运行中，很容易导致多种类型的进程同时 被关闭。如可用内存在25时，突然启动照相程序，系统可用内存急速，可能会导致空进程、内容供应节点、后台进程、次要服务等同时被关闭</li> \n   <li> 阀值上限较低：一般手机启动后，可用内存在50-100左右，但随着手机的使用，可用内存会逐步减少，最后降低到24MB左右，则系统开始启动进 程管理机制，开始结束进程，但这个阀限制设在了24MB，相对来说偏低。其结果会导致系统使用一段时间后，整体速度变慢。很明显的就是，当手机长时间使用 后，开启电话拨号，相册，照相机等应用时，系统的反应速度极慢。</li> \n  </ol> \n  <p>基于以上几个问题，不难看出，我们修改的目标也将非常明确，主要解决两个矛盾：</p> \n  <ol> \n   <li>拉开各进程的阀值层次，使得进程管理机制能更有效得工作</li> \n   <li>提升阀值上限，空出更多的空余内存，以提升系统整体的运行速度</li> \n  </ol> \n  <p>进程管理策略设置原则：</p> \n  <ol> \n   <li>前台进程、可见进程和次要服务是与用户体验息息相关的内容，这部分的进程管理策略要相对保守，给这些进程留下足够的运行空间</li> \n   <li>压榨无用进程，腾出内存空间给主要程序使用</li> \n  </ol> \n  <p>下面笔者总结了几种设置方式，适应不同的使用需要：</p> \n  <ul> \n   <li><strong>游戏玩家/重度浏览器使用者配置：</strong> \n    <ul> \n     <li>用户特点：长时间专注于某一特定的，高内存需求的程序，对多任务的需求不高</li> \n     <li>配置参数： \n      <ul> \n       <li>Foreground：6</li> \n       <li>Visible：8</li> \n       <li>Secondary Server：16</li> \n       <li>Hiden App：80</li> \n       <li>Content Provider：90</li> \n       <li>Empty:100</li> \n      </ul> </li> \n     <li>配置理念：压榨后台进程，内容供应节点和空进程，将内存尽可能多得留给前台进程和系统，提升游戏速度和浏览器体验</li> \n     <li>优点：程序启动和运行的速度最快</li> \n     <li>缺点：多任务处理不理想，开启程序较多时，后台进程会被终止</li> \n    </ul> </li> \n   <li><strong>多任务配置：</strong> \n    <ul> \n     <li>用户特点：同时运行多个应用程序，需要经常在多个程序间切换</li> \n     <li>配置参数： \n      <ul> \n       <li>Foreground：6</li> \n       <li>Visible：8</li> \n       <li>Secondary Server：16</li> \n       <li>Hiden App：20</li> \n       <li>Content Provider：60</li> \n       <li>Empty:100</li> \n      </ul> </li> \n     <li>配置理念：压榨空进程，给内容供应节点留有一定空间，最大限度提升后台程序的使用空间，提升多任务的处理能力</li> \n     <li>优点：运行多个程序时，由于可支配内存较多，后台程序不容易被终止</li> \n     <li> 缺点：程序启动的速度和整体系统的运行速度可能会比游戏玩家配置略慢一些，由于经常运行多任务，平时系统的响应速度会受到一定影响</li> \n    </ul> </li> \n   <li><strong>轻度用户/女生专用配置</strong> \n    <ul> \n     <li>用户特点：手机的主要功能是短信和电话，偶尔用用相机自拍</li> \n     <li>配置参数： \n      <ul> \n       <li>Foreground：6</li> \n       <li>Visible：8</li> \n       <li>Secondary Server：16</li> \n       <li>Hiden App：24</li> \n       <li>Content Provider：32</li> \n       <li>Empty:48</li> \n      </ul> </li> \n     <li> 配置理念：将系统的可用内存提升至30MB以上，保证系统的运行速度，长时间运行时，启动照相等高内存需求的程序亦不卡；拉开各类型进程的层次，试进程管理有更大的缓冲余地</li> \n     <li> 优点：比较均衡的配置，提升了系统的可用内存，使得系统的整体速度得到了提高，拉开了各级进程的管理策略层次，使得管理机制更有效率</li> \n     <li>缺点：比较均衡的配置，无明显缺点</li> \n    </ul> </li> \n  </ul> \n  <h1>总结</h1> \n  <p> 阐述完了内存管理的机制，并推荐了一些配置参数，但这些参数并不一定适用于所有人，大家也可以根据自己实际的使用习惯调整这些参数的设置。</p> \n </div> \n <p>Tags: <a href=\"http://noirbright.com/?tag=amm\" rel=\"tag\">amm</a>, <a href=\"http://noirbright.com/?tag=android\" rel=\"tag\">Android</a>, <a href=\"http://noirbright.com/?tag=hero\" rel=\"tag\">hero</a>, <a href=\"http://noirbright.com/?tag=htc\" rel=\"tag\">htc</a>, <a href=\"http://noirbright.com/?tag=mfm\" rel=\"tag\">mfm</a>, <a href=\"http://noirbright.com/?tag=ram\" rel=\"tag\">ram</a>, <a href=\"http://noirbright.com/?tag=tools\" rel=\"tag\">Tools</a></p> \n</div>"},"date":{"text":"2010-12-13 11:53:13"}}